buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'checkstyle'
apply plugin: 'org.asciidoctor.convert'

apply from: 'publish-maven.gradle'

checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    configProperties = [ 'checkstyle.config.dir' : rootProject.file('config/checkstyle') ]
    toolVersion = '7.3'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    maven { url 'https://repo.spring.io/release' }
}

group = 'io.spring.gradle'
description = 'Dependency Management Plugin'

ext {
    cglibVersion = '3.1'
    jarjarVersion = '1.2.1'
    mavenVersion = '3.0.4'
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

configurations {
    docs
    jarjar
    maven
    nohttp
}

task mavenRepackJar(type: Jar) { repackJar ->
    repackJar.baseName = "maven-repack"
    repackJar.version = mavenVersion

    doLast() {
        project.ant {
            taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.jarjar.asPath
            jarjar(destfile: repackJar.archivePath) {
                configurations.maven.each { originalJar ->
                    zipfileset(src: originalJar)
                }
                rule(pattern: 'org.**', result: 'io.spring.gradle.dependencymanagement.org.@1')
            }
        }
    }
}

dependencies {
    asciidoctor 'io.spring.asciidoctor:spring-asciidoctor-extensions:0.1.2.RELEASE'
    
    compile gradleApi()
    compile localGroovy()
    compile(files(mavenRepackJar))

    docs 'io.spring.docresources:spring-doc-resources:0.1.0.RELEASE@zip'

    jarjar "org.gradle.jarjar:jarjar:$jarjarVersion"

    maven "org.apache.maven:maven-model-builder:$mavenVersion"

    nohttp "io.spring.nohttp:nohttp-cli:0.0.10"

    testCompile gradleTestKit()
    testCompile "cglib:cglib-nodep:$cglibVersion"
    testCompile "org.assertj:assertj-core:1.7.1"
    testCompile "org.mockito:mockito-core:2.28.2"
    testCompile "junit:junit:4.13.2"
}

jar {
    dependsOn mavenRepackJar
    from(zipTree(mavenRepackJar.archivePath)) {
        include 'io/spring/gradle/**'
        include 'META-INF/plexus/**'
    }

    manifest {
        attributes(
            'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
            'Implementation-Title': project.description,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'Pivotal Software, Inc.'
        )
    }
}

javadoc {
    title = "$project.description $project.version API"
    exclude 'io/spring/gradle/dependencymanagement/internal/**'
    options {
        links "https://docs.gradle.org/${GradleVersion.current().version}/javadoc/",
              'https://docs.oracle.com/javase/6/docs/api/'
    }
}

task prepareAsciidocBuild(type: Sync) {
    from {
        configurations.docs.collect { zipTree(it) }
    }
    from 'src/docs/asciidoc/'
    from ('src/docs/css/') {
        into "css"
    }
    into "$buildDir/asciidoc/src"
}

asciidoctor {
    dependsOn 'prepareAsciidocBuild'
    sourceDir "$buildDir/asciidoc/src"
    sources {
        include 'index.adoc'
    }
    resources {
        from(sourceDir) {
            include 'css/**', 'js/**'
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = "javadoc"
    from javadoc
}

task docsZip(type: Zip, dependsOn: [':asciidoctor', ':javadoc']) {
    group = 'Distribution'
    baseName = 'dependency-management-plugin'
    classifier = 'docs'
    description = "Builds -${classifier} archive containing API and reference documentation"
    destinationDir = file("${project.buildDir}/distributions")

    from("$asciidoctor.outputDir/html5") {
        into 'reference/html'
    }

    from(javadoc) {
        into 'api'
    }
}

task nohttp(type: JavaExec) {
    main = 'io.spring.nohttp.cli.NoHttpCliMain'
    classpath = configurations.nohttp
    args = [
        '-D=build'
    ]
}

check {
    dependsOn nohttp
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives docsZip
}
